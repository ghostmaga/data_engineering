SET SEARCH_PATH TO PUBLIC;

--Task 1
--Create a view called 'sales_revenue_by_category_qtr' that shows the film category and total sales revenue 
--for the current quarter. The view should only display categories with at least one sale in the current quarter. 

CREATE OR REPLACE VIEW SALES_REVENUE_BY_CATEGORY_QTR AS
SELECT C.NAME AS CATEGORY_NAME, SUM(P.AMOUNT) AS TOTAL_SALES_REVENUE
FROM PAYMENT P 
INNER JOIN RENTAL R 
ON P.RENTAL_ID = R.RENTAL_ID 
INNER JOIN INVENTORY I 
ON R.INVENTORY_ID = I.INVENTORY_ID 
INNER JOIN FILM F 
ON I.FILM_ID = F.FILM_ID 
INNER JOIN FILM_CATEGORY FC 
ON F.FILM_ID = FC.FILM_ID 
INNER JOIN CATEGORY C 
ON FC.CATEGORY_ID = C.CATEGORY_ID 
WHERE EXTRACT (QUARTER FROM P.PAYMENT_DATE) = EXTRACT(QUARTER FROM CURRENT_DATE) 
AND EXTRACT(YEAR FROM P.PAYMENT_DATE) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY C.NAME
HAVING COUNT(DISTINCT P.PAYMENT_ID) > 0
ORDER BY TOTAL_SALES_REVENUE DESC;


--Task 2
--Create a query language function called 'get_sales_revenue_by_category_qtr' that accepts one parameter
--representing the current quarter and returns the same result as the 'sales_revenue_by_category_qtr' view.

CREATE OR REPLACE FUNCTION GET_SALES_REVENUE_BY_CATEGORY_QTR (QTR INTEGER)
RETURNS TABLE (CATEGORY_NAME TEXT, TOTAL_SALES_REVENUE NUMERIC) AS
$$
BEGIN
    RETURN QUERY
    SELECT 
        C."NAME" AS CATEGORY_NAME,
        SUM(P.AMOUNT) AS TOTAL_SALES_REVENUE
    FROM  FILM_CATEGORY FC
    JOIN CATEGORY C 
    ON FC.CATEGORY_ID = C.CATEGORY_ID
    JOIN INVENTORY I 
    ON FC.FILM_ID = I.FILM_ID
    JOIN RENTAL R 
    ON I.INVENTORY_ID = R.INVENTORY_ID
    JOIN PAYMENT P 
    ON R.RENTAL_ID = P.RENTAL_ID
    WHERE EXTRACT(QUARTER FROM P.PAYMENT_DATE) = QTR
    AND EXTRACT(YEAR FROM P.PAYMENT_DATE) = EXTRACT(YEAR FROM CURRENT_DATE)
    GROUP BY C.NAME
    HAVING SUM(P.AMOUNT) > 0; -- FILTERS OUT CATEGORIES WITH NO SALES IN THE SPECIFIED QUARTER
END;
$$
LANGUAGE 'plpgsql';


--Task 3
--Create a function that takes a country as an input parameter and returns the most popular film in that specific country.

CREATE OR REPLACE FUNCTION MOST_POPULAR_FILMS_BY_COUNTRIES(COUNTRIES TEXT[])
RETURNS TABLE (COUNTRY TEXT, FILM_TITLE TEXT, FILM_RATING MPAA_RATING, FILM_LANGUAGE bpchar(20), FILM_LENGTH INT2, FILM_RELEASE_YEAR "year") AS
$$
DECLARE
    COUNTRY_NAME TEXT;
BEGIN
    -- LOOP THROUGH THE ARRAY OF COUNTRIES
    FOREACH COUNTRY_NAME IN ARRAY COUNTRIES LOOP
        RETURN QUERY
        SELECT 	COUNTRY_NAME, 
        		FILM.TITLE, 
        		MAX(FILM.RATING) AS FILM_RATING, 
        		language.name as FILM_LANGUAGE,  
        		FILM.LENGTH,
        		FILM.RELEASE_YEAR  
        FROM FILM
        INNER JOIN INVENTORY 
        ON FILM.FILM_ID = INVENTORY.FILM_ID
        INNER JOIN STORE 
        ON INVENTORY.STORE_ID = STORE.STORE_ID
        INNER JOIN ADDRESS 
        ON STORE.ADDRESS_ID = ADDRESS.ADDRESS_ID
        INNER JOIN CITY 
        ON ADDRESS.CITY_ID = CITY.CITY_ID
        INNER JOIN COUNTRY 
        ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
        INNER JOIN LANGUAGE 
        ON FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID
        WHERE UPPER(COUNTRY.COUNTRY) = UPPER(COUNTRY_NAME) -- IMPORTANT CONDITION TO CONSIDER ONLY NEEDED COUNTRIES
        GROUP BY COUNTRY_NAME, FILM.TITLE, FILM.LENGTH, language.name, FILM.RELEASE_YEAR 
        ORDER BY COUNT(*) DESC
        LIMIT 1;
    END LOOP;
END;
$$
LANGUAGE 'plpgsql';

--Task 4
--Create a function that generates a list of movies available in stock based on a partial title match 
--(e.g., movies containing the word 'love' in their title).

CREATE OR REPLACE FUNCTION FILMS_IN_STOCK_BY_TITLE(PARTIAL_TITLE TEXT)
-- RETURNS A TABLE WITH ROW NUMBERS, FILM TITLES, LANGUAGES, CUSTOMER NAMES, AND RENTAL DATES
RETURNS TABLE (ROW_NUM INTEGER, FILM_TITLE TEXT, FILM_LANGUAGE BPCHAR(20), CUSTOMER_NAME TEXT, RENTAL_DATE TIMESTAMPTZ) AS
$$
BEGIN
    RETURN QUERY
    SELECT 
    	ROW_NUMBER() OVER (ORDER BY FILM.FILM_ID)::INTEGER AS ROW_NUM,
        FILM.TITLE AS FILM_TITLE,
        LANGUAGE.NAME AS FILM_LANGUAGE,
        CUSTOMER.FIRST_NAME || ' ' || CUSTOMER.LAST_NAME AS CUSTOMER_NAME,
        RENTAL.RENTAL_DATE AS RENTAL_DATE
    FROM 
        FILM
        
    -- VARIOUS JOINS AND CONDITIONS TO GATHER INFORMATION ABOUT AVAILABLE MOVIES
    INNER JOIN 
        INVENTORY ON FILM.FILM_ID = INVENTORY.FILM_ID
    INNER JOIN 
        RENTAL ON INVENTORY.INVENTORY_ID = RENTAL.INVENTORY_ID
    INNER JOIN 
        CUSTOMER ON RENTAL.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
    INNER JOIN 
        LANGUAGE ON FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID
    WHERE 
        FILM.TITLE ILIKE PARTIAL_TITLE
        AND INVENTORY_IN_STOCK(INVENTORY.INVENTORY_ID) -- CHECK IF THE INVENTORY IS IN STOCK
    ORDER BY 
        ROW_NUM, FILM.TITLE;
    
    -- HANDLES THE CASE WHEN NO MOVIES ARE FOUND MATCHING THE TITLE PATTERN
	IF NOT EXISTS (
        SELECT 1 
        FROM FILM
        WHERE FILM.TITLE ILIKE PARTIAL_TITLE
    ) THEN
        RAISE NOTICE 'MOVIES WITH THE SPECIFIED TITLE PATTERN NOT FOUND IN STOCK.';
    END IF;
END;
$$
LANGUAGE 'plpgsql';

--Task 5
--Create a procedure language function called 'new_movie' that takes a movie title as a parameter and inserts 
--a new movie with the given title in the film table. The function should generate a new unique film ID, 
--set the rental rate to 4.99, the rental duration to three days, the replacement cost to 19.99. 
--The release year and language are optional and by default should be current year and Klingon respectively. 
--The function should also verify that the language exists in the 'language' table. 
--Then, ensure that no such function has been created before; if so, replace it.

CREATE OR REPLACE FUNCTION NEW_MOVIE(
    MOVIE_TITLE TEXT,
    RELEASE_YEAR "year" DEFAULT EXTRACT(YEAR FROM CURRENT_DATE),
    MOVIE_LANGUAGE TEXT DEFAULT 'KLINGON'
)
RETURNS VOID AS $$
DECLARE
    NEW_FILM_ID INTEGER;
BEGIN
    -- VERIFY IF THE LANGUAGE EXISTS IN THE 'LANGUAGE' TABLE
    PERFORM LANGUAGE_ID FROM LANGUAGE WHERE NAME = MOVIE_LANGUAGE;
    
    -- IF THE LANGUAGE DOESN'T EXIST, RAISE AN EXCEPTION
    IF NOT FOUND THEN
        RAISE EXCEPTION 'LANGUAGE % DOES NOT EXIST IN THE DATABASE', MOVIE_LANGUAGE;
    END IF;

    -- GENERATE A NEW UNIQUE FILM ID
    SELECT MAX(FILM_ID) + 1 INTO NEW_FILM_ID FROM FILM;

    -- INSERT THE NEW MOVIE INTO THE FILM TABLE
    INSERT INTO FILM (FILM_ID, TITLE, RELEASE_YEAR, LANGUAGE_ID, RENTAL_RATE, RENTAL_DURATION, REPLACEMENT_COST)
    VALUES (NEW_FILM_ID, MOVIE_TITLE, RELEASE_YEAR, (SELECT LANGUAGE_ID FROM LANGUAGE WHERE NAME = MOVIE_LANGUAGE), 4.99, 3, 19.99);
END;
$$ LANGUAGE 'plpgsql';