1) 
----film_in_stock and film_not_in_stock----
Both functions return a set of inventory IDs for films in or not in stock at a specified store. They rely on the inventory_in_stock function to determine whether an item is in stock or not.

----get_customer_balance----
This function calculates a customer's balance considering rental fees, overdue fees, and payments made. It should return the net balance based on the parameters provided.

----inventory_in_stock----
Checks if an inventory item is in stock based on rental data. Returns a boolean indicating whether the inventory item is available.

----inventory_held_by_customer----
Retrieves the customer ID holding a particular inventory item based on the rental table.

----rewards_report----
This function appears to generate a report of customers meeting certain purchase criteria within the last month. Creates and uses a temporary table to store customer IDs meeting specified purchase conditions. Retrieves customer information based on the temporary table's content.

----last_day----
Determines the last day of a given timestamp's month.

2) 
It is not working because payment table has payments only for few days of 5th and 6th months of 2017. Function considers current_date to calculate last_month_start, so result is empty. Also, last_month_start calculation is wrong, because as I understand, the function returns customizable list of the top customers for the previous month. However, in fact, it will calculate considering a month that is 3 month earlier than current_date  

CREATE OR REPLACE FUNCTION public.rewards_report1(
    min_monthly_purchases INTEGER,
    min_dollar_amount_purchased NUMERIC
)
RETURNS SETOF customer
LANGUAGE plpgsql
SECURITY DEFINER
AS $function$
DECLARE
    last_month_start DATE;
    last_month_end DATE;
    rr RECORD;
    tmpSQL TEXT;
--    cur DATE;
BEGIN
    -- Some sanity checks
    IF min_monthly_purchases <= 0 THEN
        RAISE EXCEPTION 'Minimum monthly purchases parameter must be greater than 0';
    END IF;
    IF min_dollar_amount_purchased <= 0.00 THEN
        RAISE EXCEPTION 'Minimum monthly dollar amount purchased parameter must be greater than $0.00';
    END IF;
	
--    cur := '2017-07-07';
    -- Calculate the start and end dates of the last month
    last_month_start := DATE_TRUNC('MONTH', current_date - INTERVAL '1 month');
    last_month_end := last_month_start + INTERVAL '1 month' - INTERVAL '1 day';

    -- Create a temporary table to store customer IDs
    CREATE TEMPORARY TABLE tmpCustomer (customer_id INTEGER NOT NULL PRIMARY KEY);

    -- Find all customers meeting the monthly purchase requirements
    tmpSQL := 'INSERT INTO tmpCustomer (customer_id)
               SELECT p.customer_id
               FROM payment AS p
               WHERE p.payment_date >= ' || quote_literal(last_month_start) || '
               AND p.payment_date <= ' || quote_literal(last_month_end) || '
               GROUP BY p.customer_id
               HAVING SUM(p.amount) > ' || min_dollar_amount_purchased || '
               AND COUNT(p.customer_id) > ' || min_monthly_purchases;
    EXECUTE tmpSQL;

    /*
    Output ALL customer information of matching rewardees.
    Customize output as needed.
    */
   	
   
    FOR rr IN EXECUTE 'SELECT c.* FROM tmpCustomer AS t INNER JOIN customer AS c ON t.customer_id = c.customer_id' LOOP
        RETURN NEXT rr;
    END LOOP;

    /* Clean up */
    tmpSQL := 'DROP TABLE tmpCustomer';
    EXECUTE tmpSQL;

RETURN;
END
$function$;

It also won't display any customer list with current_date(because of absence of data for that date). But, still, seems better for me.

3) 
group_concat, because PostgreSQL already has built-in functions, CONCAT() and STRING_AGG(). Even assuming that group_concat might slightly differ from others, built-in functions can totally be used to derive the same results as for group_concat.
 
4)
CREATE OR REPLACE FUNCTION public.get_customer_balance(p_customer_id integer, p_effective_date timestamp with time zone)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_rentfees DECIMAL(5,2) := 0.0; -- FEES PAID TO RENT THE VIDEOS INITIALLY
    v_overfees DECIMAL(5,2) := 0.0;  -- LATE FEES FOR PRIOR RENTALS
    v_payments DECIMAL(5,2) := 0.0;   -- SUM OF PAYMENTS MADE PREVIOUSLY
    v_replacement_cost DECIMAL(5,2) := 0.0; -- REPLACEMENT COST FOR OVERDUE FILMS
BEGIN
    -- CALCULATE RENTAL FEES FOR ALL PREVIOUS RENTALS
    SELECT COALESCE(SUM(film.rental_rate),0)
    	INTO v_rentfees
    FROM 
    	film
    INNER JOIN 
    	inventory ON film.film_id = inventory.film_id
    INNER JOIN 
    	rental ON inventory.inventory_id = rental.inventory_id
    WHERE rental.rental_date <= p_effective_date
    	AND rental.customer_id = p_customer_id;

    -- CALCULATE LATE FEES FOR PRIOR RENTALS
    SELECT COALESCE(SUM(
            CASE 
                WHEN (rental.return_date - rental.rental_date) > (film.rental_duration * INTERVAL '1 day') THEN 
                    EXTRACT(epoch FROM ((rental.return_date - rental.rental_date) - (film.rental_duration * INTERVAL '1 day'))) / 86400 * 1.0
                ELSE 0.0
            END), 0.0)
    	INTO v_overfees
    FROM 
    	film
    INNER JOIN 
    	inventory ON film.film_id = inventory.film_id
    INNER JOIN 
    	rental ON inventory.inventory_id = rental.inventory_id
    WHERE rental.rental_date <= p_effective_date
    	AND rental.customer_id = p_customer_id;

    -- CALCULATE REPLACEMENT COST FOR OVERDUE FILMS
    SELECT COALESCE(SUM(
            CASE 
                WHEN (rental.return_date - rental.rental_date) > (film.rental_duration * INTERVAL '2 day') THEN 
                    film.replacement_cost
                ELSE 0.0
            END), 0.0)
    INTO v_replacement_cost
    FROM 
    	film
    INNER JOIN 
    	inventory ON film.film_id = inventory.film_id
    INNER JOIN 
    	rental ON inventory.inventory_id = rental.inventory_id
    WHERE rental.rental_date <= p_effective_date
    	AND rental.customer_id = p_customer_id;

    -- CALCULATE SUM OF PAYMENTS MADE PREVIOUSLY
    SELECT COALESCE(SUM(payment.amount),0)
    	INTO v_payments
    FROM 
    	payment
    WHERE payment.payment_date <= p_effective_date
    	AND payment.customer_id = p_customer_id;

    -- RETURN THE BALANCE
    RETURN v_rentfees + v_overfees - v_payments + v_replacement_cost;
END
$function$;

SELECT * FROM get_customer_balance(1, current_date);

5)
These function are custom functions for concatenating strings across rows because in PostgreSQL there is no such built-in functions like in MySQL.
--group_concat: aggregates strings from multiple rows into a single string. It concatenates values from a column across multiple rows and groups them based on a specified condition or column
--_group_concat: helper function used by group_concat.

Speaking of CONCAT() and STRING_AGG() built-in funtcionc, of course we can achieve the same results without group_concat, but, as I said, I think, database creator wanted to maintain compatability in case of migrating from other DB systems. Moreover, its difference is that 'group_concat' has options of specifying ordering.

Also, these functions are used within the context of views (nicer_but_slower_film_list, film_list, actor_info). They are employed to aggregate actor names and film titles across different tables (actor, film, film_actor, category) to display information in a specific format.

6)
--last_updated: used as a trigger to update the last_update column of a table with the current timestamp whenever a new row is inserted or updated in the table. It is created as a trigger for every table in database. For example, CREATE TRIGGER last_updated BEFORE UPDATE ON table_name FOR EACH ROW EXECUTE PROCEDURE last_updated();

7) 
--tmpSQL is used to store a dynamically generated SQL query(EXECUTE). It is possible to leave the function as a static statement, so that it may improve performance and security, but if the function at first aims for dynamic changes of query structure then, it is not preferrable to cut off EXECUTE statement.

For example:
CREATE OR REPLACE FUNCTION public.rewards_report(
    min_monthly_purchases INTEGER,
    min_dollar_amount_purchased NUMERIC
)
RETURNS SETOF customer
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    last_month_start DATE;
    last_month_end DATE;
BEGIN
    -- Calculate the start and end dates of the last month
    last_month_start := DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '1 month');
    last_month_end := LAST_DAY(last_month_start);

    -- Create a temporary table to store customer IDs
    CREATE TEMPORARY TABLE tmpCustomer (customer_id INTEGER NOT NULL PRIMARY KEY);

    -- Find all customers meeting the monthly purchase requirements
    INSERT INTO tmpCustomer (customer_id)
    SELECT p.customer_id
    FROM payment AS p
    WHERE p.payment_date >= last_month_start
    AND p.payment_date <= last_month_end
    GROUP BY p.customer_id
    HAVING SUM(p.amount) > min_dollar_amount_purchased
    AND COUNT(p.customer_id) > min_monthly_purchases;

    -- Output ALL customer information of matching rewardees
    RETURN QUERY
    SELECT c.*
    FROM tmpCustomer AS t
    INNER JOIN customer AS c ON t.customer_id = c.customer_id;

    -- Clean up
    DROP TABLE tmpCustomer;
END;
$$;


